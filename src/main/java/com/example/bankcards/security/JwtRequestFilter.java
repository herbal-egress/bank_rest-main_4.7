package com.example.bankcards.security;
import com.example.bankcards.service.auth.UserDetailsService;
import com.example.bankcards.util.JwtUtil;
import jakarta.servlet.FilterChain;
import jakarta.servlet.ServletException;
import jakarta.servlet.http.HttpServletRequest;
import jakarta.servlet.http.HttpServletResponse;
import org.springframework.security.authentication.UsernamePasswordAuthenticationToken;
import org.springframework.security.core.context.SecurityContextHolder;
import org.springframework.security.core.userdetails.UserDetails;
import org.springframework.security.web.authentication.WebAuthenticationDetailsSource;
import org.springframework.stereotype.Component;
import org.springframework.web.filter.OncePerRequestFilter;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import java.io.IOException;
@Component
@RequiredArgsConstructor
@Slf4j
public class JwtRequestFilter extends OncePerRequestFilter {
    private final UserDetailsService userDetailsService;
    private final JwtUtil jwtUtil;
    @Override
    protected void doFilterInternal(HttpServletRequest request, HttpServletResponse response,
                                    FilterChain chain) throws ServletException, IOException {
        final String authorizationHeader = request.getHeader("Authorization");
        String path = request.getRequestURI();
        log.debug("=== JWT –§–ò–õ–¨–¢–† ===");
        log.debug("–ú–µ—Ç–æ–¥: {}, –ü—É—Ç—å: {}, Authorization: {}",
                request.getMethod(), path,
                authorizationHeader != null ? "–ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç" : "–æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç");
        if (path.startsWith("/swagger-ui") || path.startsWith("/v3/api-docs")) {
            log.debug("–ó–ê–ü–†–û–° –ö SWAGGER: {} - –ø—Ä–æ–ø—É—Å–∫–∞–µ–º JWT —Ñ–∏–ª—å—Ç—Ä", path);
        }
        String username = null;
        String jwtToken = null;
        if (authorizationHeader != null && authorizationHeader.startsWith("Bearer ")) {
            jwtToken = authorizationHeader.substring(7);
            username = jwtUtil.extractUsername(jwtToken);
            log.debug("–ò–∑–≤–ª–µ—á–µ–Ω username –∏–∑ —Ç–æ–∫–µ–Ω–∞: {}", username);
        }
        if (username != null && SecurityContextHolder.getContext().getAuthentication() == null) {
            try {
                UserDetails userDetails = userDetailsService.loadUserByUsername(username);
                if (jwtUtil.validateToken(jwtToken, userDetails)) {
                    UsernamePasswordAuthenticationToken authToken =
                            new UsernamePasswordAuthenticationToken(userDetails, null, userDetails.getAuthorities());
                    authToken.setDetails(new WebAuthenticationDetailsSource().buildDetails(request));
                    SecurityContextHolder.getContext().setAuthentication(authToken);
                    log.info("–ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {}", username);
                } else {
                    log.warn("–¢–æ–∫–µ–Ω –Ω–µ –≤–∞–ª–∏–¥–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {}", username);
                }
            } catch (Exception e) {
                log.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Ç–æ–∫–µ–Ω–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {}: {}", username, e.getMessage(), e);
            }
        }
        log.debug("=== –ö–û–ù–ï–¶ JWT –§–ò–õ–¨–¢–†–ê - –ø–µ—Ä–µ–¥–∞–µ–º —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–∞–ª—å—à–µ ===");
        chain.doFilter(request, response);
    }
    @Override
    public boolean shouldNotFilter(HttpServletRequest request) throws ServletException {
        String path = request.getRequestURI();
        String[] publicPaths = {
                "/auth/login",           
                "/auth/**",              
                "/swagger-ui.html",      
                "/swagger-ui/**",        
                "/v3/api-docs/**",       
                "/v3/api-docs",          
                "/v3/api-docs.yaml",     
                "/actuator/health",      
                "/actuator/**"           
        };
        for (String publicPath : publicPaths) {
            if (path.equals(publicPath) || (publicPath.endsWith("**") && path.startsWith(publicPath.replace("/**", "")))) {
                log.debug("üö´ JWT –§–ò–õ–¨–¢–† –ü–†–û–ü–£–©–ï–ù: {} (–º–∞—Ç—á–∏—Ç {})", path, publicPath);
                return true;
            }
        }
        log.debug("üîí JWT –§–ò–õ–¨–¢–† –ü–†–ò–ú–ï–ù–Å–ù: {}", path);
        return false;
    }
}